// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { RootRetrieveData, RootRetrieveResponses, AuthLoginCreateData, AuthLoginCreateResponses, AuthLogoutCreateData, AuthLogoutCreateResponses, AuthPasswordChangeCreateData, AuthPasswordChangeCreateResponses, AuthPasswordResetCreateData, AuthPasswordResetCreateResponses, AuthPasswordResetConfirmCreateData, AuthPasswordResetConfirmCreateResponses, AuthRefreshCreateData, AuthRefreshCreateResponses, AuthRefreshTokenCreateData, AuthRefreshTokenCreateResponses, AuthRegisterCreateData, AuthRegisterCreateResponses, ListListData, ListListResponses, MeRetrieveData, MeRetrieveResponses, ProfileRetrieveData, ProfileRetrieveResponses, ProfilePartialUpdateData, ProfilePartialUpdateResponses, ProfileUpdateData, ProfileUpdateResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Public user profile view.
 */
export const rootRetrieve = <ThrowOnError extends boolean = false>(options: Options<RootRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RootRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/users/{username}/',
        ...options
    });
};

/**
 * Authenticate user and return tokens.
 */
export const authLoginCreate = <ThrowOnError extends boolean = false>(options?: Options<AuthLoginCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AuthLoginCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/users/auth/login/',
        ...options
    });
};

/**
 * Logout user and blacklist tokens.
 */
export const authLogoutCreate = <ThrowOnError extends boolean = false>(options?: Options<AuthLogoutCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AuthLogoutCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/users/auth/logout/',
        ...options
    });
};

/**
 * Change user password.
 */
export const authPasswordChangeCreate = <ThrowOnError extends boolean = false>(options?: Options<AuthPasswordChangeCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AuthPasswordChangeCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/users/auth/password/change/',
        ...options
    });
};

/**
 * Request password reset.
 */
export const authPasswordResetCreate = <ThrowOnError extends boolean = false>(options?: Options<AuthPasswordResetCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AuthPasswordResetCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/users/auth/password/reset/',
        ...options
    });
};

/**
 * Confirm password reset.
 */
export const authPasswordResetConfirmCreate = <ThrowOnError extends boolean = false>(options?: Options<AuthPasswordResetConfirmCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AuthPasswordResetConfirmCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/users/auth/password/reset/confirm/',
        ...options
    });
};

/**
 * Takes a refresh type JSON web token and returns an access type JSON web
 * token if the refresh token is valid.
 */
export const authRefreshCreate = <ThrowOnError extends boolean = false>(options: Options<AuthRefreshCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AuthRefreshCreateResponses, unknown, ThrowOnError>({
        url: '/apix/users/auth/refresh/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Refresh access token.
 */
export const authRefreshTokenCreate = <ThrowOnError extends boolean = false>(options?: Options<AuthRefreshTokenCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AuthRefreshTokenCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/users/auth/refresh-token/',
        ...options
    });
};

/**
 * User registration view.
 */
export const authRegisterCreate = <ThrowOnError extends boolean = false>(options: Options<AuthRegisterCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AuthRegisterCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/users/auth/register/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List users view (public).
 */
export const listList = <ThrowOnError extends boolean = false>(options?: Options<ListListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListListResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/users/list/',
        ...options
    });
};

/**
 * Get current user info.
 */
export const meRetrieve = <ThrowOnError extends boolean = false>(options?: Options<MeRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MeRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/users/me/',
        ...options
    });
};

/**
 * User profile view.
 */
export const profileRetrieve = <ThrowOnError extends boolean = false>(options?: Options<ProfileRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ProfileRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/users/profile/',
        ...options
    });
};

/**
 * User profile view.
 */
export const profilePartialUpdate = <ThrowOnError extends boolean = false>(options?: Options<ProfilePartialUpdateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).patch<ProfilePartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/users/profile/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * User profile view.
 */
export const profileUpdate = <ThrowOnError extends boolean = false>(options?: Options<ProfileUpdateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<ProfileUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/users/profile/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};