// This file is auto-generated by @hey-api/openapi-ts

export type PaginatedUserProfileList = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<UserProfile>;
};

/**
 * Serializer for user profile with minimal fields.
 */
export type PatchedUserProfile = {
    readonly id?: number;
    /**
     * Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
     */
    readonly username?: string;
    /**
     * Email address
     */
    readonly email?: string;
    first_name?: string;
    last_name?: string;
    readonly full_name?: string;
    readonly display_name?: string;
    bio?: string;
    /**
     * Avatar URL
     */
    avatar?: string;
    phone?: string;
    website?: string;
    location?: string;
    /**
     * Verified
     */
    readonly is_verified?: boolean;
    readonly date_joined?: string;
};

export type TokenRefresh = {
    readonly access: string;
};

/**
 * Serializer for user registration.
 */
export type UserCreate = {
    /**
     * Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
     */
    username: string;
    /**
     * Email address
     */
    email?: string;
    password: string;
    password_confirm: string;
    first_name?: string;
    last_name?: string;
    bio?: string;
    /**
     * Avatar URL
     */
    avatar?: string;
    phone?: string;
    date_of_birth?: string | null;
    website?: string;
    location?: string;
    email_notifications?: boolean;
    newsletter_subscription?: boolean;
};

/**
 * Serializer for user profile with minimal fields.
 */
export type UserProfile = {
    readonly id: number;
    /**
     * Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
     */
    readonly username: string;
    /**
     * Email address
     */
    readonly email: string;
    first_name?: string;
    last_name?: string;
    readonly full_name: string;
    readonly display_name: string;
    bio?: string;
    /**
     * Avatar URL
     */
    avatar?: string;
    phone?: string;
    website?: string;
    location?: string;
    /**
     * Verified
     */
    readonly is_verified: boolean;
    readonly date_joined: string;
};

export type TokenRefreshWritable = {
    refresh: string;
};

export type RootRetrieveData = {
    body?: never;
    path: {
        username: string;
    };
    query?: never;
    url: '/apix/users/{username}/';
};

export type RootRetrieveResponses = {
    200: UserProfile;
};

export type RootRetrieveResponse = RootRetrieveResponses[keyof RootRetrieveResponses];

export type AuthLoginCreateData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/apix/users/auth/login/';
};

export type AuthLoginCreateResponses = {
    /**
     * No response body
     */
    200: unknown;
};

export type AuthLogoutCreateData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/apix/users/auth/logout/';
};

export type AuthLogoutCreateResponses = {
    /**
     * No response body
     */
    200: unknown;
};

export type AuthPasswordChangeCreateData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/apix/users/auth/password/change/';
};

export type AuthPasswordChangeCreateResponses = {
    /**
     * No response body
     */
    200: unknown;
};

export type AuthPasswordResetCreateData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/apix/users/auth/password/reset/';
};

export type AuthPasswordResetCreateResponses = {
    /**
     * No response body
     */
    200: unknown;
};

export type AuthPasswordResetConfirmCreateData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/apix/users/auth/password/reset/confirm/';
};

export type AuthPasswordResetConfirmCreateResponses = {
    /**
     * No response body
     */
    200: unknown;
};

export type AuthRefreshCreateData = {
    body: TokenRefreshWritable;
    path?: never;
    query?: never;
    url: '/apix/users/auth/refresh/';
};

export type AuthRefreshCreateResponses = {
    200: TokenRefresh;
};

export type AuthRefreshCreateResponse = AuthRefreshCreateResponses[keyof AuthRefreshCreateResponses];

export type AuthRefreshTokenCreateData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/apix/users/auth/refresh-token/';
};

export type AuthRefreshTokenCreateResponses = {
    /**
     * No response body
     */
    200: unknown;
};

export type AuthRegisterCreateData = {
    body: UserCreate;
    path?: never;
    query?: never;
    url: '/apix/users/auth/register/';
};

export type AuthRegisterCreateResponses = {
    201: UserCreate;
};

export type AuthRegisterCreateResponse = AuthRegisterCreateResponses[keyof AuthRegisterCreateResponses];

export type ListListData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Which field to use when ordering the results.
         */
        ordering?: string;
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * A search term.
         */
        search?: string;
    };
    url: '/apix/users/list/';
};

export type ListListResponses = {
    200: PaginatedUserProfileList;
};

export type ListListResponse = ListListResponses[keyof ListListResponses];

export type MeRetrieveData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/apix/users/me/';
};

export type MeRetrieveResponses = {
    /**
     * No response body
     */
    200: unknown;
};

export type ProfileRetrieveData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/apix/users/profile/';
};

export type ProfileRetrieveResponses = {
    200: UserProfile;
};

export type ProfileRetrieveResponse = ProfileRetrieveResponses[keyof ProfileRetrieveResponses];

export type ProfilePartialUpdateData = {
    body?: PatchedUserProfile;
    path?: never;
    query?: never;
    url: '/apix/users/profile/';
};

export type ProfilePartialUpdateResponses = {
    200: UserProfile;
};

export type ProfilePartialUpdateResponse = ProfilePartialUpdateResponses[keyof ProfilePartialUpdateResponses];

export type ProfileUpdateData = {
    body?: UserProfile;
    path?: never;
    query?: never;
    url: '/apix/users/profile/';
};

export type ProfileUpdateResponses = {
    200: UserProfile;
};

export type ProfileUpdateResponse = ProfileUpdateResponses[keyof ProfileUpdateResponses];

export type ClientOptions = {
    baseUrl: `${string}://${string}` | (string & {});
};