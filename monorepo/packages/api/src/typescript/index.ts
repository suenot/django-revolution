/**
 * Simple API Client (auto-generated, strict types, minimal, DRY)
 * Generated at: 2025-07-28T07:24:21.999762
 * DO NOT EDIT - This file is automatically generated
 */import * as AccountsEndpoints from './accounts';
import { createClient as createAccountsClient, createConfig as createAccountsConfig } from './accounts/client';import * as PublicEndpoints from './public';
import { createClient as createPublicClient, createConfig as createPublicConfig } from './public/client';import * as PrivateEndpoints from './private';
import { createClient as createPrivateClient, createConfig as createPrivateConfig } from './private/client';import * as TradingEndpoints from './trading';
import { createClient as createTradingClient, createConfig as createTradingConfig } from './trading/client';export * as AccountsTypes from './accounts';export * as PublicTypes from './public';export * as PrivateTypes from './private';export * as TradingTypes from './trading';
export const TOKEN_KEY = "auth_token";
export const REFRESH_TOKEN_KEY = "refresh_token";

function makeEndpoints<T extends Record<string, any>, C>(
  endpoints: T,
  client: C
): {
  [K in keyof T]: T[K] extends (options: infer O) => infer R
    ? (options?: Omit<O, 'client'>) => R
    : never;
} {
  const result = {} as any;
  (Object.keys(endpoints) as Array<keyof T>).forEach((key) => {
    const fn = endpoints[key];
    if (typeof fn === 'function') {
      result[key] = (options = {}) => fn({ ...options, client });
    }
  });
  return result as {
    [K in keyof T]: T[K] extends (options: infer O) => infer R
      ? (options?: Omit<O, 'client'>) => R
      : never;
  };
}

export class API {
  private apiUrl: string;
  private customHeaders: Record<string, string> = {};  public accounts!: {
    [K in keyof typeof AccountsEndpoints]: typeof AccountsEndpoints[K] extends (options: infer O) => infer R
      ? (options?: Omit<O, 'client'>) => R
      : never;
  };  public public!: {
    [K in keyof typeof PublicEndpoints]: typeof PublicEndpoints[K] extends (options: infer O) => infer R
      ? (options?: Omit<O, 'client'>) => R
      : never;
  };  public private!: {
    [K in keyof typeof PrivateEndpoints]: typeof PrivateEndpoints[K] extends (options: infer O) => infer R
      ? (options?: Omit<O, 'client'>) => R
      : never;
  };  public trading!: {
    [K in keyof typeof TradingEndpoints]: typeof TradingEndpoints[K] extends (options: infer O) => infer R
      ? (options?: Omit<O, 'client'>) => R
      : never;
  };
  constructor(apiUrl: string) {
    this.apiUrl = apiUrl;
    this._initClients();
  }

  private _makeConfig() {
    const token = this.getToken();
    const headers: Record<string, string> = { ...this.customHeaders };
    
    if (token) {
      headers['Authorization'] = `Bearer ${token}`;
    }
    
    return {
      baseUrl: this.apiUrl,
      headers: Object.keys(headers).length > 0 ? headers : undefined,
    };
  }

  _initClients() {
    const config = this._makeConfig();    this.accounts = makeEndpoints(
      AccountsEndpoints,
      createAccountsClient(createAccountsConfig(config))
    );    this.public = makeEndpoints(
      PublicEndpoints,
      createPublicClient(createPublicConfig(config))
    );    this.private = makeEndpoints(
      PrivateEndpoints,
      createPrivateClient(createPrivateConfig(config))
    );    this.trading = makeEndpoints(
      TradingEndpoints,
      createTradingClient(createTradingConfig(config))
    );  }

  /**
   * Set custom headers for API requests
   * @param headers - Object with header key-value pairs
   */
  setHeaders(headers: Record<string, string>) {
    this.customHeaders = { ...this.customHeaders, ...headers };
    this._initClients();
  }

  /**
   * Set API key for authentication
   * @param apiKey - The API key to use
   */
  setApiKey(apiKey: string) {
    this.setHeaders({ 'X-API-Key': apiKey });
  }

  /**
   * Clear all custom headers
   */
  clearHeaders() {
    this.customHeaders = {};
    this._initClients();
  }

  /**
   * Get current custom headers
   */
  getHeaders(): Record<string, string> {
    return { ...this.customHeaders };
  }

  getToken() {
    if (typeof window === 'undefined') return null;
    return localStorage.getItem(TOKEN_KEY);
  }
  getRefreshToken() {
    if (typeof window === 'undefined') return null;
    return localStorage.getItem(REFRESH_TOKEN_KEY);
  }
  setToken(token: string, refreshToken?: string) {
    if (typeof window === 'undefined') return;
    localStorage.setItem(TOKEN_KEY, token);
    if (refreshToken) {
      localStorage.setItem(REFRESH_TOKEN_KEY, refreshToken);
    }
    this._initClients();
  }
  clearTokens() {
    if (typeof window === 'undefined') return;
    localStorage.removeItem(TOKEN_KEY);
    localStorage.removeItem(REFRESH_TOKEN_KEY);
    this._initClients();
  }
  isAuthenticated() {
    return !!this.getToken();
  }
  setApiUrl(url: string) {
    this.apiUrl = url;
    this._initClients();
  }
  getApiUrl() {
    return this.apiUrl;
  }
}

// Export the class for manual instantiation
export default API; 