// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { CategoriesListData, CategoriesListResponses, CategoriesCreateData, CategoriesCreateResponses, CategoriesProductsListData, CategoriesProductsListResponses, CategoriesProductsCreateData, CategoriesProductsCreateResponses, CategoriesProductsDestroyData, CategoriesProductsDestroyResponses, CategoriesProductsRetrieveData, CategoriesProductsRetrieveResponses, CategoriesProductsPartialUpdateData, CategoriesProductsPartialUpdateResponses, CategoriesProductsUpdateData, CategoriesProductsUpdateResponses, CategoriesProductsOrderItemsListData, CategoriesProductsOrderItemsListResponses, CategoriesProductsByCategoryListData, CategoriesProductsByCategoryListResponses, CategoriesProductsLowStockListData, CategoriesProductsLowStockListResponses, CategoriesDestroyData, CategoriesDestroyResponses, CategoriesRetrieveData, CategoriesRetrieveResponses, CategoriesPartialUpdateData, CategoriesPartialUpdateResponses, CategoriesUpdateData, CategoriesUpdateResponses, CategoriesProductsList2Data, CategoriesProductsList2Responses, CategoriesActiveListData, CategoriesActiveListResponses, OrderItemsListData, OrderItemsListResponses, OrderItemsCreateData, OrderItemsCreateResponses, OrderItemsDestroyData, OrderItemsDestroyResponses, OrderItemsRetrieveData, OrderItemsRetrieveResponses, OrderItemsPartialUpdateData, OrderItemsPartialUpdateResponses, OrderItemsUpdateData, OrderItemsUpdateResponses, OrdersListData, OrdersListResponses, OrdersCreateData, OrdersCreateResponses, OrdersDestroyData, OrdersDestroyResponses, OrdersRetrieveData, OrdersRetrieveResponses, OrdersPartialUpdateData, OrdersPartialUpdateResponses, OrdersUpdateData, OrdersUpdateResponses, OrdersCancelCreateData, OrdersCancelCreateResponses, OrdersItemsListData, OrdersItemsListResponses, OrdersItemsList2Data, OrdersItemsList2Responses, OrdersItemsCreateData, OrdersItemsCreateResponses, OrdersItemsDestroyData, OrdersItemsDestroyResponses, OrdersItemsRetrieveData, OrdersItemsRetrieveResponses, OrdersItemsPartialUpdateData, OrdersItemsPartialUpdateResponses, OrdersItemsUpdateData, OrdersItemsUpdateResponses, OrdersByStatusListData, OrdersByStatusListResponses, ProductsListData, ProductsListResponses, ProductsCreateData, ProductsCreateResponses, ProductsDestroyData, ProductsDestroyResponses, ProductsRetrieveData, ProductsRetrieveResponses, ProductsPartialUpdateData, ProductsPartialUpdateResponses, ProductsUpdateData, ProductsUpdateResponses, ProductsOrderItemsListData, ProductsOrderItemsListResponses, ProductsOrderItemsList2Data, ProductsOrderItemsList2Responses, ProductsOrderItemsCreateData, ProductsOrderItemsCreateResponses, ProductsOrderItemsDestroyData, ProductsOrderItemsDestroyResponses, ProductsOrderItemsRetrieveData, ProductsOrderItemsRetrieveResponses, ProductsOrderItemsPartialUpdateData, ProductsOrderItemsPartialUpdateResponses, ProductsOrderItemsUpdateData, ProductsOrderItemsUpdateResponses, ProductsByCategoryListData, ProductsByCategoryListResponses, ProductsLowStockListData, ProductsLowStockListResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * ViewSet for Category model with nested routing and drf-spectacular documentation.
 */
export const categoriesList = <ThrowOnError extends boolean = false>(options?: Options<CategoriesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CategoriesListResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/private_api/categories/',
        ...options
    });
};

/**
 * ViewSet for Category model with nested routing and drf-spectacular documentation.
 */
export const categoriesCreate = <ThrowOnError extends boolean = false>(options: Options<CategoriesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CategoriesCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/private_api/categories/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * ViewSet for Product model with nested routing.
 */
export const categoriesProductsList = <ThrowOnError extends boolean = false>(options: Options<CategoriesProductsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CategoriesProductsListResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/private_api/categories/{category_id}/products/',
        ...options
    });
};

/**
 * ViewSet for Product model with nested routing.
 */
export const categoriesProductsCreate = <ThrowOnError extends boolean = false>(options: Options<CategoriesProductsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CategoriesProductsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/private_api/categories/{category_id}/products/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * ViewSet for Product model with nested routing.
 */
export const categoriesProductsDestroy = <ThrowOnError extends boolean = false>(options: Options<CategoriesProductsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CategoriesProductsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/private_api/categories/{category_id}/products/{id}/',
        ...options
    });
};

/**
 * ViewSet for Product model with nested routing.
 */
export const categoriesProductsRetrieve = <ThrowOnError extends boolean = false>(options: Options<CategoriesProductsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CategoriesProductsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/private_api/categories/{category_id}/products/{id}/',
        ...options
    });
};

/**
 * ViewSet for Product model with nested routing.
 */
export const categoriesProductsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<CategoriesProductsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<CategoriesProductsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/private_api/categories/{category_id}/products/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * ViewSet for Product model with nested routing.
 */
export const categoriesProductsUpdate = <ThrowOnError extends boolean = false>(options: Options<CategoriesProductsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<CategoriesProductsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/private_api/categories/{category_id}/products/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get product order items
 * Returns all order items for specific product
 */
export const categoriesProductsOrderItemsList = <ThrowOnError extends boolean = false>(options: Options<CategoriesProductsOrderItemsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CategoriesProductsOrderItemsListResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/private_api/categories/{category_id}/products/{id}/order_items/',
        ...options
    });
};

/**
 * Get products by category
 * Get products filtered by category.
 */
export const categoriesProductsByCategoryList = <ThrowOnError extends boolean = false>(options: Options<CategoriesProductsByCategoryListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CategoriesProductsByCategoryListResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/private_api/categories/{category_id}/products/by_category/',
        ...options
    });
};

/**
 * Get low stock products
 * Returns products with stock less than 10
 */
export const categoriesProductsLowStockList = <ThrowOnError extends boolean = false>(options: Options<CategoriesProductsLowStockListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CategoriesProductsLowStockListResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/private_api/categories/{category_id}/products/low_stock/',
        ...options
    });
};

/**
 * ViewSet for Category model with nested routing and drf-spectacular documentation.
 */
export const categoriesDestroy = <ThrowOnError extends boolean = false>(options: Options<CategoriesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CategoriesDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/private_api/categories/{id}/',
        ...options
    });
};

/**
 * ViewSet for Category model with nested routing and drf-spectacular documentation.
 */
export const categoriesRetrieve = <ThrowOnError extends boolean = false>(options: Options<CategoriesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CategoriesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/private_api/categories/{id}/',
        ...options
    });
};

/**
 * ViewSet for Category model with nested routing and drf-spectacular documentation.
 */
export const categoriesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<CategoriesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<CategoriesPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/private_api/categories/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * ViewSet for Category model with nested routing and drf-spectacular documentation.
 */
export const categoriesUpdate = <ThrowOnError extends boolean = false>(options: Options<CategoriesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<CategoriesUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/private_api/categories/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get category products
 * Returns all products in specific category
 */
export const categoriesProductsList2 = <ThrowOnError extends boolean = false>(options: Options<CategoriesProductsList2Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CategoriesProductsList2Responses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/private_api/categories/{id}/products/',
        ...options
    });
};

/**
 * Get active categories
 * Returns only active categories
 */
export const categoriesActiveList = <ThrowOnError extends boolean = false>(options?: Options<CategoriesActiveListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CategoriesActiveListResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/private_api/categories/active/',
        ...options
    });
};

/**
 * ViewSet for OrderItem model with nested routing.
 */
export const orderItemsList = <ThrowOnError extends boolean = false>(options?: Options<OrderItemsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OrderItemsListResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/private_api/order-items/',
        ...options
    });
};

/**
 * ViewSet for OrderItem model with nested routing.
 */
export const orderItemsCreate = <ThrowOnError extends boolean = false>(options: Options<OrderItemsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OrderItemsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/private_api/order-items/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * ViewSet for OrderItem model with nested routing.
 */
export const orderItemsDestroy = <ThrowOnError extends boolean = false>(options: Options<OrderItemsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<OrderItemsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/private_api/order-items/{id}/',
        ...options
    });
};

/**
 * ViewSet for OrderItem model with nested routing.
 */
export const orderItemsRetrieve = <ThrowOnError extends boolean = false>(options: Options<OrderItemsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OrderItemsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/private_api/order-items/{id}/',
        ...options
    });
};

/**
 * ViewSet for OrderItem model with nested routing.
 */
export const orderItemsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<OrderItemsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<OrderItemsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/private_api/order-items/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * ViewSet for OrderItem model with nested routing.
 */
export const orderItemsUpdate = <ThrowOnError extends boolean = false>(options: Options<OrderItemsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<OrderItemsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/private_api/order-items/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * ViewSet for Order model with nested routing.
 */
export const ordersList = <ThrowOnError extends boolean = false>(options?: Options<OrdersListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OrdersListResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/private_api/orders/',
        ...options
    });
};

/**
 * ViewSet for Order model with nested routing.
 */
export const ordersCreate = <ThrowOnError extends boolean = false>(options: Options<OrdersCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OrdersCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/private_api/orders/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * ViewSet for Order model with nested routing.
 */
export const ordersDestroy = <ThrowOnError extends boolean = false>(options: Options<OrdersDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<OrdersDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/private_api/orders/{id}/',
        ...options
    });
};

/**
 * ViewSet for Order model with nested routing.
 */
export const ordersRetrieve = <ThrowOnError extends boolean = false>(options: Options<OrdersRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OrdersRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/private_api/orders/{id}/',
        ...options
    });
};

/**
 * ViewSet for Order model with nested routing.
 */
export const ordersPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<OrdersPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<OrdersPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/private_api/orders/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * ViewSet for Order model with nested routing.
 */
export const ordersUpdate = <ThrowOnError extends boolean = false>(options: Options<OrdersUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<OrdersUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/private_api/orders/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Cancel order
 * Cancel an order.
 */
export const ordersCancelCreate = <ThrowOnError extends boolean = false>(options: Options<OrdersCancelCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OrdersCancelCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/private_api/orders/{id}/cancel/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get order items
 * Returns all items in specific order
 */
export const ordersItemsList = <ThrowOnError extends boolean = false>(options: Options<OrdersItemsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OrdersItemsListResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/private_api/orders/{id}/items/',
        ...options
    });
};

/**
 * ViewSet for OrderItem model with nested routing.
 */
export const ordersItemsList2 = <ThrowOnError extends boolean = false>(options: Options<OrdersItemsList2Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OrdersItemsList2Responses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/private_api/orders/{order_id}/items/',
        ...options
    });
};

/**
 * ViewSet for OrderItem model with nested routing.
 */
export const ordersItemsCreate = <ThrowOnError extends boolean = false>(options: Options<OrdersItemsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OrdersItemsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/private_api/orders/{order_id}/items/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * ViewSet for OrderItem model with nested routing.
 */
export const ordersItemsDestroy = <ThrowOnError extends boolean = false>(options: Options<OrdersItemsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<OrdersItemsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/private_api/orders/{order_id}/items/{id}/',
        ...options
    });
};

/**
 * ViewSet for OrderItem model with nested routing.
 */
export const ordersItemsRetrieve = <ThrowOnError extends boolean = false>(options: Options<OrdersItemsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OrdersItemsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/private_api/orders/{order_id}/items/{id}/',
        ...options
    });
};

/**
 * ViewSet for OrderItem model with nested routing.
 */
export const ordersItemsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<OrdersItemsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<OrdersItemsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/private_api/orders/{order_id}/items/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * ViewSet for OrderItem model with nested routing.
 */
export const ordersItemsUpdate = <ThrowOnError extends boolean = false>(options: Options<OrdersItemsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<OrdersItemsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/private_api/orders/{order_id}/items/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get orders by status
 * Get orders filtered by status.
 */
export const ordersByStatusList = <ThrowOnError extends boolean = false>(options?: Options<OrdersByStatusListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OrdersByStatusListResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/private_api/orders/by_status/',
        ...options
    });
};

/**
 * ViewSet for Product model with nested routing.
 */
export const productsList = <ThrowOnError extends boolean = false>(options?: Options<ProductsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ProductsListResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/private_api/products/',
        ...options
    });
};

/**
 * ViewSet for Product model with nested routing.
 */
export const productsCreate = <ThrowOnError extends boolean = false>(options: Options<ProductsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProductsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/private_api/products/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * ViewSet for Product model with nested routing.
 */
export const productsDestroy = <ThrowOnError extends boolean = false>(options: Options<ProductsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ProductsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/private_api/products/{id}/',
        ...options
    });
};

/**
 * ViewSet for Product model with nested routing.
 */
export const productsRetrieve = <ThrowOnError extends boolean = false>(options: Options<ProductsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProductsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/private_api/products/{id}/',
        ...options
    });
};

/**
 * ViewSet for Product model with nested routing.
 */
export const productsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<ProductsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ProductsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/private_api/products/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * ViewSet for Product model with nested routing.
 */
export const productsUpdate = <ThrowOnError extends boolean = false>(options: Options<ProductsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ProductsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/private_api/products/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get product order items
 * Returns all order items for specific product
 */
export const productsOrderItemsList = <ThrowOnError extends boolean = false>(options: Options<ProductsOrderItemsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProductsOrderItemsListResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/private_api/products/{id}/order_items/',
        ...options
    });
};

/**
 * ViewSet for OrderItem model with nested routing.
 */
export const productsOrderItemsList2 = <ThrowOnError extends boolean = false>(options: Options<ProductsOrderItemsList2Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProductsOrderItemsList2Responses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/private_api/products/{product_id}/order-items/',
        ...options
    });
};

/**
 * ViewSet for OrderItem model with nested routing.
 */
export const productsOrderItemsCreate = <ThrowOnError extends boolean = false>(options: Options<ProductsOrderItemsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProductsOrderItemsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/private_api/products/{product_id}/order-items/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * ViewSet for OrderItem model with nested routing.
 */
export const productsOrderItemsDestroy = <ThrowOnError extends boolean = false>(options: Options<ProductsOrderItemsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ProductsOrderItemsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/private_api/products/{product_id}/order-items/{id}/',
        ...options
    });
};

/**
 * ViewSet for OrderItem model with nested routing.
 */
export const productsOrderItemsRetrieve = <ThrowOnError extends boolean = false>(options: Options<ProductsOrderItemsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProductsOrderItemsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/private_api/products/{product_id}/order-items/{id}/',
        ...options
    });
};

/**
 * ViewSet for OrderItem model with nested routing.
 */
export const productsOrderItemsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<ProductsOrderItemsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ProductsOrderItemsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/private_api/products/{product_id}/order-items/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * ViewSet for OrderItem model with nested routing.
 */
export const productsOrderItemsUpdate = <ThrowOnError extends boolean = false>(options: Options<ProductsOrderItemsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ProductsOrderItemsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/private_api/products/{product_id}/order-items/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get products by category
 * Get products filtered by category.
 */
export const productsByCategoryList = <ThrowOnError extends boolean = false>(options?: Options<ProductsByCategoryListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ProductsByCategoryListResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/private_api/products/by_category/',
        ...options
    });
};

/**
 * Get low stock products
 * Returns products with stock less than 10
 */
export const productsLowStockList = <ThrowOnError extends boolean = false>(options?: Options<ProductsLowStockListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ProductsLowStockListResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/private_api/products/low_stock/',
        ...options
    });
};