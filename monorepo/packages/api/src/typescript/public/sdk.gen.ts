// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { ApixPublicApiPostsListData, ApixPublicApiPostsListResponses, ApixPublicApiPostsCreateData, ApixPublicApiPostsCreateResponses, ApixPublicApiPostsDestroyData, ApixPublicApiPostsDestroyResponses, ApixPublicApiPostsRetrieveData, ApixPublicApiPostsRetrieveResponses, ApixPublicApiPostsPartialUpdateData, ApixPublicApiPostsPartialUpdateResponses, ApixPublicApiPostsUpdateData, ApixPublicApiPostsUpdateResponses, ApixPublicApiPostsPublishCreateData, ApixPublicApiPostsPublishCreateResponses, ApixPublicApiPostsUnpublishCreateData, ApixPublicApiPostsUnpublishCreateResponses, ApixPublicApiPostsByAuthorListData, ApixPublicApiPostsByAuthorListResponses, ApixPublicApiPostsPublishedListData, ApixPublicApiPostsPublishedListResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * ViewSet for Post model with nested routing.
 */
export const apixPublicApiPostsList = <ThrowOnError extends boolean = false>(options?: Options<ApixPublicApiPostsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApixPublicApiPostsListResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/public_api/posts/',
        ...options
    });
};

/**
 * ViewSet for Post model with nested routing.
 */
export const apixPublicApiPostsCreate = <ThrowOnError extends boolean = false>(options: Options<ApixPublicApiPostsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ApixPublicApiPostsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/public_api/posts/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * ViewSet for Post model with nested routing.
 */
export const apixPublicApiPostsDestroy = <ThrowOnError extends boolean = false>(options: Options<ApixPublicApiPostsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ApixPublicApiPostsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/public_api/posts/{id}/',
        ...options
    });
};

/**
 * ViewSet for Post model with nested routing.
 */
export const apixPublicApiPostsRetrieve = <ThrowOnError extends boolean = false>(options: Options<ApixPublicApiPostsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApixPublicApiPostsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/public_api/posts/{id}/',
        ...options
    });
};

/**
 * ViewSet for Post model with nested routing.
 */
export const apixPublicApiPostsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<ApixPublicApiPostsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ApixPublicApiPostsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/public_api/posts/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * ViewSet for Post model with nested routing.
 */
export const apixPublicApiPostsUpdate = <ThrowOnError extends boolean = false>(options: Options<ApixPublicApiPostsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ApixPublicApiPostsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/public_api/posts/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Publish post
 * Mark post as published
 */
export const apixPublicApiPostsPublishCreate = <ThrowOnError extends boolean = false>(options: Options<ApixPublicApiPostsPublishCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ApixPublicApiPostsPublishCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/public_api/posts/{id}/publish/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Unpublish post
 * Mark post as unpublished
 */
export const apixPublicApiPostsUnpublishCreate = <ThrowOnError extends boolean = false>(options: Options<ApixPublicApiPostsUnpublishCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ApixPublicApiPostsUnpublishCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/public_api/posts/{id}/unpublish/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get posts by author
 * Returns posts filtered by author
 */
export const apixPublicApiPostsByAuthorList = <ThrowOnError extends boolean = false>(options?: Options<ApixPublicApiPostsByAuthorListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApixPublicApiPostsByAuthorListResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/public_api/posts/by_author/',
        ...options
    });
};

/**
 * Get published posts
 * Returns only published posts
 */
export const apixPublicApiPostsPublishedList = <ThrowOnError extends boolean = false>(options?: Options<ApixPublicApiPostsPublishedListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApixPublicApiPostsPublishedListResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/public_api/posts/published/',
        ...options
    });
};