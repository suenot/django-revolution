// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { ChannelsListData, ChannelsListResponses, ChannelsCreateData, ChannelsCreateResponses, ChannelsDestroyData, ChannelsDestroyResponses, ChannelsRetrieveData, ChannelsRetrieveResponses, ChannelsPartialUpdateData, ChannelsPartialUpdateResponses, ChannelsUpdateData, ChannelsUpdateResponses, ChannelsMessagesRetrieveData, ChannelsMessagesRetrieveResponses, ChannelsSignalsRetrieveData, ChannelsSignalsRetrieveResponses, ChannelsStatsRetrieveData, ChannelsStatsRetrieveResponses, MessagesListData, MessagesListResponses, MessagesCreateData, MessagesCreateResponses, MessagesDestroyData, MessagesDestroyResponses, MessagesRetrieveData, MessagesRetrieveResponses, MessagesPartialUpdateData, MessagesPartialUpdateResponses, MessagesUpdateData, MessagesUpdateResponses, MessagesSignalsRetrieveData, MessagesSignalsRetrieveResponses, SignalsListData, SignalsListResponses, SignalsCreateData, SignalsCreateResponses, SignalsDestroyData, SignalsDestroyResponses, SignalsRetrieveData, SignalsRetrieveResponses, SignalsPartialUpdateData, SignalsPartialUpdateResponses, SignalsUpdateData, SignalsUpdateResponses, SignalsRecentRetrieveData, SignalsRecentRetrieveResponses, SignalsStatsRetrieveData, SignalsStatsRetrieveResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * ViewSet для управления каналами.
 */
export const channelsList = <ThrowOnError extends boolean = false>(options?: Options<ChannelsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ChannelsListResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/trading_signals/channels/',
        ...options
    });
};

/**
 * ViewSet для управления каналами.
 */
export const channelsCreate = <ThrowOnError extends boolean = false>(options: Options<ChannelsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ChannelsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/trading_signals/channels/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * ViewSet для управления каналами.
 */
export const channelsDestroy = <ThrowOnError extends boolean = false>(options: Options<ChannelsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ChannelsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/trading_signals/channels/{id}/',
        ...options
    });
};

/**
 * ViewSet для управления каналами.
 */
export const channelsRetrieve = <ThrowOnError extends boolean = false>(options: Options<ChannelsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ChannelsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/trading_signals/channels/{id}/',
        ...options
    });
};

/**
 * ViewSet для управления каналами.
 */
export const channelsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<ChannelsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ChannelsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/trading_signals/channels/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * ViewSet для управления каналами.
 */
export const channelsUpdate = <ThrowOnError extends boolean = false>(options: Options<ChannelsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ChannelsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/trading_signals/channels/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Получить сообщения канала.
 */
export const channelsMessagesRetrieve = <ThrowOnError extends boolean = false>(options: Options<ChannelsMessagesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ChannelsMessagesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/trading_signals/channels/{id}/messages/',
        ...options
    });
};

/**
 * Получить сигналы канала.
 */
export const channelsSignalsRetrieve = <ThrowOnError extends boolean = false>(options: Options<ChannelsSignalsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ChannelsSignalsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/trading_signals/channels/{id}/signals/',
        ...options
    });
};

/**
 * Получить статистику по каналам.
 */
export const channelsStatsRetrieve = <ThrowOnError extends boolean = false>(options?: Options<ChannelsStatsRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ChannelsStatsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/trading_signals/channels/stats/',
        ...options
    });
};

/**
 * ViewSet для управления сообщениями.
 */
export const messagesList = <ThrowOnError extends boolean = false>(options?: Options<MessagesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MessagesListResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/trading_signals/messages/',
        ...options
    });
};

/**
 * ViewSet для управления сообщениями.
 */
export const messagesCreate = <ThrowOnError extends boolean = false>(options: Options<MessagesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MessagesCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/trading_signals/messages/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * ViewSet для управления сообщениями.
 */
export const messagesDestroy = <ThrowOnError extends boolean = false>(options: Options<MessagesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MessagesDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/trading_signals/messages/{id}/',
        ...options
    });
};

/**
 * ViewSet для управления сообщениями.
 */
export const messagesRetrieve = <ThrowOnError extends boolean = false>(options: Options<MessagesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MessagesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/trading_signals/messages/{id}/',
        ...options
    });
};

/**
 * ViewSet для управления сообщениями.
 */
export const messagesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<MessagesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MessagesPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/trading_signals/messages/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * ViewSet для управления сообщениями.
 */
export const messagesUpdate = <ThrowOnError extends boolean = false>(options: Options<MessagesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MessagesUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/trading_signals/messages/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Получить сигналы сообщения.
 */
export const messagesSignalsRetrieve = <ThrowOnError extends boolean = false>(options: Options<MessagesSignalsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MessagesSignalsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/trading_signals/messages/{id}/signals/',
        ...options
    });
};

/**
 * ViewSet для управления торговыми сигналами.
 */
export const signalsList = <ThrowOnError extends boolean = false>(options?: Options<SignalsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SignalsListResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/trading_signals/signals/',
        ...options
    });
};

/**
 * ViewSet для управления торговыми сигналами.
 */
export const signalsCreate = <ThrowOnError extends boolean = false>(options: Options<SignalsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SignalsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/trading_signals/signals/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * ViewSet для управления торговыми сигналами.
 */
export const signalsDestroy = <ThrowOnError extends boolean = false>(options: Options<SignalsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<SignalsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/trading_signals/signals/{id}/',
        ...options
    });
};

/**
 * ViewSet для управления торговыми сигналами.
 */
export const signalsRetrieve = <ThrowOnError extends boolean = false>(options: Options<SignalsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SignalsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/trading_signals/signals/{id}/',
        ...options
    });
};

/**
 * ViewSet для управления торговыми сигналами.
 */
export const signalsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<SignalsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<SignalsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/trading_signals/signals/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * ViewSet для управления торговыми сигналами.
 */
export const signalsUpdate = <ThrowOnError extends boolean = false>(options: Options<SignalsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<SignalsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/trading_signals/signals/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Получить недавние сигналы (за последние 24 часа).
 */
export const signalsRecentRetrieve = <ThrowOnError extends boolean = false>(options?: Options<SignalsRecentRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SignalsRecentRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/trading_signals/signals/recent/',
        ...options
    });
};

/**
 * Получить статистику по сигналам.
 */
export const signalsStatsRetrieve = <ThrowOnError extends boolean = false>(options?: Options<SignalsStatsRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SignalsStatsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/apix/trading_signals/signals/stats/',
        ...options
    });
};