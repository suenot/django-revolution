// This file is auto-generated by @hey-api/openapi-ts

/**
 * Сериализатор для модели Channel.
 */
export type Channel = {
    readonly id: number;
    /**
     * Channel Name
     */
    name: string;
    /**
     * Telegram Channel ID
     */
    telegram_id: string;
    readonly created_at: string;
    readonly updated_at: string;
};

/**
 * Детальный сериализатор для Channel с сообщениями.
 */
export type ChannelDetail = {
    readonly id: number;
    /**
     * Channel Name
     */
    name: string;
    /**
     * Telegram Channel ID
     */
    telegram_id: string;
    readonly created_at: string;
    readonly updated_at: string;
    readonly messages: Array<Message>;
    readonly signals_count: string;
};

/**
 * * `LONG` - Long
 * * `SHORT` - Short
 */
export type DirectionEnum = 'LONG' | 'SHORT';

/**
 * Сериализатор для модели Message.
 */
export type Message = {
    readonly id: number;
    channel: number;
    readonly channel_name: string;
    telegram_message_id: string;
    /**
     * Message Date
     */
    date: string;
    /**
     * Message Text
     */
    text: string;
    /**
     * Media File Paths
     */
    media_path?: unknown;
    readonly created_at: string;
    readonly updated_at: string;
};

/**
 * Детальный сериализатор для Message с сигналами.
 */
export type MessageDetail = {
    readonly id: number;
    channel: number;
    readonly channel_name: string;
    telegram_message_id: string;
    /**
     * Message Date
     */
    date: string;
    /**
     * Message Text
     */
    text: string;
    /**
     * Media File Paths
     */
    media_path?: unknown;
    readonly created_at: string;
    readonly updated_at: string;
    readonly signals: Array<Signal>;
};

export type PaginatedChannelList = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<Channel>;
};

export type PaginatedMessageList = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<Message>;
};

export type PaginatedSignalList = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<Signal>;
};

/**
 * Сериализатор для модели Channel.
 */
export type PatchedChannel = {
    readonly id?: number;
    /**
     * Channel Name
     */
    name?: string;
    /**
     * Telegram Channel ID
     */
    telegram_id?: string;
    readonly created_at?: string;
    readonly updated_at?: string;
};

/**
 * Сериализатор для модели Message.
 */
export type PatchedMessage = {
    readonly id?: number;
    channel?: number;
    readonly channel_name?: string;
    telegram_message_id?: string;
    /**
     * Message Date
     */
    date?: string;
    /**
     * Message Text
     */
    text?: string;
    /**
     * Media File Paths
     */
    media_path?: unknown;
    readonly created_at?: string;
    readonly updated_at?: string;
};

/**
 * Сериализатор для модели Signal.
 */
export type PatchedSignal = {
    readonly id?: number;
    message?: number;
    channel?: number;
    readonly channel_name?: string;
    direction?: DirectionEnum;
    readonly direction_display?: string;
    ticker?: string;
    readonly ticker_display?: string;
    entry_price?: string;
    /**
     * Current Entry Price
     */
    entry_price_now?: string | null;
    leverage?: number;
    stop_loss?: string;
    timestamp?: string;
    /**
     * Take Profit Targets
     */
    take_profits?: unknown;
    readonly created_at?: string;
    readonly updated_at?: string;
};

/**
 * Сериализатор для модели Signal.
 */
export type Signal = {
    readonly id: number;
    message: number;
    channel: number;
    readonly channel_name: string;
    direction: DirectionEnum;
    readonly direction_display: string;
    ticker: string;
    readonly ticker_display: string;
    entry_price: string;
    /**
     * Current Entry Price
     */
    entry_price_now?: string | null;
    leverage: number;
    stop_loss: string;
    timestamp: string;
    /**
     * Take Profit Targets
     */
    take_profits?: unknown;
    readonly created_at: string;
    readonly updated_at: string;
};

/**
 * Сериализатор для создания торгового сигнала.
 */
export type SignalCreate = {
    message: number;
    channel: number;
    direction: DirectionEnum;
    ticker: string;
    entry_price: string;
    /**
     * Current Entry Price
     */
    entry_price_now?: string | null;
    leverage: number;
    stop_loss: string;
    timestamp: string;
    /**
     * Take Profit Targets
     */
    take_profits?: unknown;
};

export type ChannelsListData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Which field to use when ordering the results.
         */
        ordering?: string;
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * A search term.
         */
        search?: string;
    };
    url: '/apix/trading_signals/channels/';
};

export type ChannelsListResponses = {
    200: PaginatedChannelList;
};

export type ChannelsListResponse = ChannelsListResponses[keyof ChannelsListResponses];

export type ChannelsCreateData = {
    body: Channel;
    path?: never;
    query?: never;
    url: '/apix/trading_signals/channels/';
};

export type ChannelsCreateResponses = {
    201: Channel;
};

export type ChannelsCreateResponse = ChannelsCreateResponses[keyof ChannelsCreateResponses];

export type ChannelsDestroyData = {
    body?: never;
    path: {
        /**
         * A unique integer value identifying this Channel.
         */
        id: number;
    };
    query?: never;
    url: '/apix/trading_signals/channels/{id}/';
};

export type ChannelsDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type ChannelsDestroyResponse = ChannelsDestroyResponses[keyof ChannelsDestroyResponses];

export type ChannelsRetrieveData = {
    body?: never;
    path: {
        /**
         * A unique integer value identifying this Channel.
         */
        id: number;
    };
    query?: never;
    url: '/apix/trading_signals/channels/{id}/';
};

export type ChannelsRetrieveResponses = {
    200: ChannelDetail;
};

export type ChannelsRetrieveResponse = ChannelsRetrieveResponses[keyof ChannelsRetrieveResponses];

export type ChannelsPartialUpdateData = {
    body?: PatchedChannel;
    path: {
        /**
         * A unique integer value identifying this Channel.
         */
        id: number;
    };
    query?: never;
    url: '/apix/trading_signals/channels/{id}/';
};

export type ChannelsPartialUpdateResponses = {
    200: Channel;
};

export type ChannelsPartialUpdateResponse = ChannelsPartialUpdateResponses[keyof ChannelsPartialUpdateResponses];

export type ChannelsUpdateData = {
    body: Channel;
    path: {
        /**
         * A unique integer value identifying this Channel.
         */
        id: number;
    };
    query?: never;
    url: '/apix/trading_signals/channels/{id}/';
};

export type ChannelsUpdateResponses = {
    200: Channel;
};

export type ChannelsUpdateResponse = ChannelsUpdateResponses[keyof ChannelsUpdateResponses];

export type ChannelsMessagesRetrieveData = {
    body?: never;
    path: {
        /**
         * A unique integer value identifying this Channel.
         */
        id: number;
    };
    query?: never;
    url: '/apix/trading_signals/channels/{id}/messages/';
};

export type ChannelsMessagesRetrieveResponses = {
    200: Channel;
};

export type ChannelsMessagesRetrieveResponse = ChannelsMessagesRetrieveResponses[keyof ChannelsMessagesRetrieveResponses];

export type ChannelsSignalsRetrieveData = {
    body?: never;
    path: {
        /**
         * A unique integer value identifying this Channel.
         */
        id: number;
    };
    query?: never;
    url: '/apix/trading_signals/channels/{id}/signals/';
};

export type ChannelsSignalsRetrieveResponses = {
    200: Channel;
};

export type ChannelsSignalsRetrieveResponse = ChannelsSignalsRetrieveResponses[keyof ChannelsSignalsRetrieveResponses];

export type ChannelsStatsRetrieveData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/apix/trading_signals/channels/stats/';
};

export type ChannelsStatsRetrieveResponses = {
    200: Channel;
};

export type ChannelsStatsRetrieveResponse = ChannelsStatsRetrieveResponses[keyof ChannelsStatsRetrieveResponses];

export type MessagesListData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Which field to use when ordering the results.
         */
        ordering?: string;
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * A search term.
         */
        search?: string;
    };
    url: '/apix/trading_signals/messages/';
};

export type MessagesListResponses = {
    200: PaginatedMessageList;
};

export type MessagesListResponse = MessagesListResponses[keyof MessagesListResponses];

export type MessagesCreateData = {
    body: Message;
    path?: never;
    query?: never;
    url: '/apix/trading_signals/messages/';
};

export type MessagesCreateResponses = {
    201: Message;
};

export type MessagesCreateResponse = MessagesCreateResponses[keyof MessagesCreateResponses];

export type MessagesDestroyData = {
    body?: never;
    path: {
        /**
         * A unique integer value identifying this Message.
         */
        id: number;
    };
    query?: never;
    url: '/apix/trading_signals/messages/{id}/';
};

export type MessagesDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type MessagesDestroyResponse = MessagesDestroyResponses[keyof MessagesDestroyResponses];

export type MessagesRetrieveData = {
    body?: never;
    path: {
        /**
         * A unique integer value identifying this Message.
         */
        id: number;
    };
    query?: never;
    url: '/apix/trading_signals/messages/{id}/';
};

export type MessagesRetrieveResponses = {
    200: MessageDetail;
};

export type MessagesRetrieveResponse = MessagesRetrieveResponses[keyof MessagesRetrieveResponses];

export type MessagesPartialUpdateData = {
    body?: PatchedMessage;
    path: {
        /**
         * A unique integer value identifying this Message.
         */
        id: number;
    };
    query?: never;
    url: '/apix/trading_signals/messages/{id}/';
};

export type MessagesPartialUpdateResponses = {
    200: Message;
};

export type MessagesPartialUpdateResponse = MessagesPartialUpdateResponses[keyof MessagesPartialUpdateResponses];

export type MessagesUpdateData = {
    body: Message;
    path: {
        /**
         * A unique integer value identifying this Message.
         */
        id: number;
    };
    query?: never;
    url: '/apix/trading_signals/messages/{id}/';
};

export type MessagesUpdateResponses = {
    200: Message;
};

export type MessagesUpdateResponse = MessagesUpdateResponses[keyof MessagesUpdateResponses];

export type MessagesSignalsRetrieveData = {
    body?: never;
    path: {
        /**
         * A unique integer value identifying this Message.
         */
        id: number;
    };
    query?: never;
    url: '/apix/trading_signals/messages/{id}/signals/';
};

export type MessagesSignalsRetrieveResponses = {
    200: Message;
};

export type MessagesSignalsRetrieveResponse = MessagesSignalsRetrieveResponses[keyof MessagesSignalsRetrieveResponses];

export type SignalsListData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Which field to use when ordering the results.
         */
        ordering?: string;
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * A search term.
         */
        search?: string;
    };
    url: '/apix/trading_signals/signals/';
};

export type SignalsListResponses = {
    200: PaginatedSignalList;
};

export type SignalsListResponse = SignalsListResponses[keyof SignalsListResponses];

export type SignalsCreateData = {
    body: SignalCreate;
    path?: never;
    query?: never;
    url: '/apix/trading_signals/signals/';
};

export type SignalsCreateResponses = {
    201: SignalCreate;
};

export type SignalsCreateResponse = SignalsCreateResponses[keyof SignalsCreateResponses];

export type SignalsDestroyData = {
    body?: never;
    path: {
        /**
         * A unique integer value identifying this Trading Signal.
         */
        id: number;
    };
    query?: never;
    url: '/apix/trading_signals/signals/{id}/';
};

export type SignalsDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type SignalsDestroyResponse = SignalsDestroyResponses[keyof SignalsDestroyResponses];

export type SignalsRetrieveData = {
    body?: never;
    path: {
        /**
         * A unique integer value identifying this Trading Signal.
         */
        id: number;
    };
    query?: never;
    url: '/apix/trading_signals/signals/{id}/';
};

export type SignalsRetrieveResponses = {
    200: Signal;
};

export type SignalsRetrieveResponse = SignalsRetrieveResponses[keyof SignalsRetrieveResponses];

export type SignalsPartialUpdateData = {
    body?: PatchedSignal;
    path: {
        /**
         * A unique integer value identifying this Trading Signal.
         */
        id: number;
    };
    query?: never;
    url: '/apix/trading_signals/signals/{id}/';
};

export type SignalsPartialUpdateResponses = {
    200: Signal;
};

export type SignalsPartialUpdateResponse = SignalsPartialUpdateResponses[keyof SignalsPartialUpdateResponses];

export type SignalsUpdateData = {
    body: Signal;
    path: {
        /**
         * A unique integer value identifying this Trading Signal.
         */
        id: number;
    };
    query?: never;
    url: '/apix/trading_signals/signals/{id}/';
};

export type SignalsUpdateResponses = {
    200: Signal;
};

export type SignalsUpdateResponse = SignalsUpdateResponses[keyof SignalsUpdateResponses];

export type SignalsRecentRetrieveData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/apix/trading_signals/signals/recent/';
};

export type SignalsRecentRetrieveResponses = {
    200: Signal;
};

export type SignalsRecentRetrieveResponse = SignalsRecentRetrieveResponses[keyof SignalsRecentRetrieveResponses];

export type SignalsStatsRetrieveData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/apix/trading_signals/signals/stats/';
};

export type SignalsStatsRetrieveResponses = {
    200: Signal;
};

export type SignalsStatsRetrieveResponse = SignalsStatsRetrieveResponses[keyof SignalsStatsRetrieveResponses];

export type ClientOptions = {
    baseUrl: `${string}://${string}` | (string & {});
};